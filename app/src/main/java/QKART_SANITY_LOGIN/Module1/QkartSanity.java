/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.hc.core5.http2.frame.Frame;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver =
                new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s",
                String.valueOf(java.time.LocalDateTime.now()), type, message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't 2. Generate a unique
         * string using the timestamp 3. Capture screenshot 4. Save the screenshot inside the
         * "/screenshots" folder using the following naming convention:
         * screenshot_<Timestamp>_<ScreenshotType>_<Description>.png eg:
         * screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        try {
            File theDir = new File("/screenshots");
            if (!theDir.exists()) {
                theDir.mkdirs();
            }

            Calendar now = Calendar.getInstance();
            int year = now.get(Calendar.YEAR);
            int month = now.get(Calendar.MONTH) + 1; // Note: zero based!
            int day = now.get(Calendar.DAY_OF_MONTH);
            int hour = now.get(Calendar.HOUR_OF_DAY);
            int minute = now.get(Calendar.MINUTE);
            int second = now.get(Calendar.SECOND);
            int millis = now.get(Calendar.MILLISECOND);
            String timestamp = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":"
                    + second + "." + millis;

            String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType,
                    description);
            TakesScreenshot srcShot = (TakesScreenshot) driver;
            File srcFile = srcShot.getScreenshotAs(OutputType.FILE);

            File DestFile = new File("screenshots/" + fileName);
            FileUtils.copyFile(srcFile, DestFile);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        takeScreenshot(driver, "StartTestCase", "TestCase01");
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass",
                    status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        takeScreenshot(driver, "StartTestCase", "TestCase02");
        logStatus("Start Testcase",
                "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        Login login = new Login(driver);
        login.navigateToLoginPage();

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ",
                status ? "FAIL" : "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase03");
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        // we are using driver.get() so it waits until the page load no need of these statement
        // Thread.sleep(5000);

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");

        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3",
                    "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3",
                        "Test Case Failure. Test Results contains un-expected values: "
                                + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        //Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product",
                    "FAIL");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success",
                        "Successfully validated that no products found message is displayed",
                        "PASS");
            }
            logStatus("TestCase 3",
                    "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3",
                    "Test Case Fail. Expected: no results , actual: Results were available",
                    "FAIL");
            return false;
        }
        takeScreenshot(driver, "EndTestCase", "TestCase03");
        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase04");
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        // Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link",
                        "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down",
                        status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody,
                            driver)) {
                        logStatus("Step Success",
                                "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure",
                                "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        takeScreenshot(driver, "StartTestCase", "TestCase05");
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        // Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(
                ExpectedConditions.urlContains("https://crio-qkart-frontend-qa.vercel.app/thanks"));
        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
       // Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        takeScreenshot(driver, "StartTestCase", "TestCase06");
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5
        registration.navigateToRegisterPage();
        // TODO: Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // TODO: Login using the newly registed user
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        // TODO: Add "Xtend Smart Watch" to cart
        status = homePage.searchForProduct("Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");

        // TODO: Add "Yarine Floor Lamp" to cart
        status = homePage.searchForProduct("Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(2000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        //Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase06");
        return status;
    }

    /*
     * Verify that the cart contents are persisted after logout
     */
    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        takeScreenshot(driver, "StartTestCase", "TestCase07");
        List<String> expectedResult =
                Arrays.asList("Stylecon 9 Seater RHS Sofa Set", "Xtend Smart Watch");

        logStatus("Start TestCase",
                "Test Case 7: Verify that cart contents are persisted after logout", "DONE");

        Register registration = new Register(driver);
        Login login = new Login(driver);
        Home homePage = new Home(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 07: MILESTONE 6
        // TODO: Register a new user
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;


        // TODO: Login using the newly created user
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");

        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");
        //Thread.sleep(1000);
        homePage.PerformLogout();

        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        // Thread.sleep(3000);

        status = homePage.verifyCartContents(expectedResult);

        logStatus("End TestCase",
                "Test Case 7: Verify that cart contents are persisted after logout: ",
                status ? "PASS" : "FAIL");

        homePage.PerformLogout();
        takeScreenshot(driver, "EndTestCase", "TestCase07");
        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        takeScreenshot(driver, "StartTestCase", "TestCase08");
        logStatus("Start TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        //
        
        //Thread.sleep(2000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        //Thread.sleep(2000);

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase08");

        return status;
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        takeScreenshot(driver, "StartTestCase", "TestCase09");
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        List<String> expectedResult = Arrays.asList("YONEX Smash Badminton Racquet");
        logStatus("Start TestCase",
                "Test Case 9: Verify that cart contents are persisted after opening new window",
                "DONE");

        Register registration = new Register(driver);
        Login login = new Login(driver);
        Home homePage = new Home(driver);

        // registering new user
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 9", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Login using the newly created user
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 9: Happy Flow Test Failed : ",
                    status ? "PASS" : "FAIL");
        }

        homePage.navigateToHome();
        status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        //Thread.sleep(1000);
        // homePage.navigateToHome();
        driver.switchTo().newWindow(WindowType.TAB);
        driver.get("https://crio-qkart-frontend-qa.vercel.app/ ");
        //Thread.sleep(1000);
        status = homePage.verifyCartContents(expectedResult);
        // driver.close();
        logStatus("End TestCase",
                "Test Case 9 : In the new tab, the cart should contain the added product: YONEX Smash Badminton Racquet : ",
                status ? "PASS" : "FAIL");
        //Thread.sleep(2000);
        takeScreenshot(driver, "EndTestCase", "TestCase09");
        return status;
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status = false;
        takeScreenshot(driver, "StartTestCase", "TestCase10");
        logStatus("Start TestCase", "TestCase10 : Opening crio qkart website", "DONE");
        Home homePage = new Home(driver);
        homePage.navigateToHome();
       // Thread.sleep(1000);
        // driver.findElement(By.xpath("//a[@href='https://crio-qkart-frontend-qa.vercel.app/']")).click();

        driver.manage().window().maximize();
        String mainWindowHandle = driver.getWindowHandle();

        // WebDriverWait wait = new WebDriverWait(driver, 30);
        // wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[@href='privacy-policy']")));
        WebElement privacyLink = driver.findElement(By.xpath("//a[@href='privacy-policy']"));
        JavascriptExecutor js = (JavascriptExecutor) driver;
        // Scroll down till the bottom of the page
        js.executeScript("arguments[0].scrollIntoView();", privacyLink);
        privacyLink.click();
        //Thread.sleep(3000);
        driver.switchTo().window(mainWindowHandle);
        Thread.sleep(1000);

        String titleOfOriginalPage = driver.getCurrentUrl();
        // System.out.println(titleOfOriginalPage);
        status = titleOfOriginalPage.equals("https://crio-qkart-frontend-qa.vercel.app/");
        logStatus("Step Success",
                "Checking for the title of the original page after clicking on privacy policy link.",
                status ? "PASS" : "Fail");

       // Thread.sleep(2000);
        Set<String> window_handles = driver.getWindowHandles();

        // Close all the newly opened windows but not the main window
        for (String handle : window_handles) {
            // If not the main window, switch to it so that we can close it
            if (!handle.equals(mainWindowHandle)) {
                driver.switchTo().window(handle);
                //Thread.sleep(3000);
                // driver.close();
            }
        }
        WebElement privacyPageConfirmation = driver
                .findElement(By.xpath("//div[@class='greeting-container MuiBox-root css-0']/h2"));
        String privacyPageString = privacyPageConfirmation.getText();
        // System.out.println(privacyPageString);
        if (privacyPageString.equals("Privacy Policy")) {
            logStatus("Step Success", "Checking the content of the Privacy page :",
                    status ? "PASS" : "FAIL");
        }
        //Thread.sleep(3000);
        // driver.close();
        driver.switchTo().window(mainWindowHandle);
        WebElement termsOfConditionLink =
                driver.findElement(By.xpath("//a[@href='terms-of-service']"));
        js.executeScript("arguments[0].scrollIntoView();", termsOfConditionLink);
        termsOfConditionLink.click();
       // Thread.sleep(3000);
        driver.switchTo().window(mainWindowHandle);

        if (titleOfOriginalPage.equals("https://crio-qkart-frontend-qa.vercel.app/")) {
            logStatus("Step Success",
                    "Checking for the title of the original page after clicking on Terms of service link.",
                    status ? "PASS" : "Fail");
        }
        //Thread.sleep(2000);
        Set<String> window_handles1 = driver.getWindowHandles();
        for (String handle : window_handles1) {
            // If not the main window, switch to it so that we can close it
            if (!handle.equals(mainWindowHandle)) {
                driver.switchTo().window(handle);
                //Thread.sleep(3000);
            }
        }
        // Thread.sleep(3000);
        WebElement termsOfServiceContent = driver
                .findElement(By.xpath("//div[@class='greeting-container MuiBox-root css-0']/h2"));
        String termsOfServiceContentToString = termsOfServiceContent.getText();
        //Thread.sleep(3000);
        if (termsOfServiceContentToString.equals("Terms of Service")) {
            logStatus("Step Success", "Checking the content of the Terms of Service page :",
                    status ? "PASS" : "FAIL");

        }
       // Thread.sleep(3000);
        driver.switchTo().window(mainWindowHandle);
        Set<String> window_handles3 = driver.getWindowHandles();
        for (String handle : window_handles3) {
            // If not the main window, switch to it so that we can close it
            if (!handle.equals(mainWindowHandle)) {
                driver.switchTo().window(handle);
                //Thread.sleep(3000);
                driver.close();
            }
        }
        //Thread.sleep(3000);
        driver.switchTo().window(mainWindowHandle);
        logStatus("Step Success", "Closing all the newly open windows", status ? "PASS" : "FAIL");
        logStatus("End TestCase",
                "Test Case 10: After clicking on the links present in footer page the homepage url is not change and whatever link we open it  opens the correct page.",
                status ? "PASS" : "FAIL");
                takeScreenshot(driver, "EndTestCase", "TestCase10");
        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        takeScreenshot(driver, "StartTestCase", "TestCase11");
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        logStatus("Start TestCase", "Test Case 11 : Checking for Contact us link", "DONE");
        driver.navigate().refresh();
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        WebElement contactUs =
                driver.findElement(By.xpath("//div[@class='footer-links MuiBox-root css-0']/p[3]"));
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView();", contactUs);
        contactUs.click();
        Thread.sleep(2000);
        WebElement contactUsDialogBox = driver.findElement(By.className("card-block"));
        status = contactUsDialogBox.isDisplayed();

        logStatus("Step Success", "Checking the contact us dialog box is open.",
                status ? "PASS" : "FAIL");
        driver.findElement(By.xpath("//input[@placeholder='Name']")).sendKeys("crio user");
        driver.findElement(By.xpath("//input[@placeholder='Email']"))
                .sendKeys(" criouser@gmail.com");
        driver.findElement(By.xpath("//input[@placeholder='Message']"))
                .sendKeys("Testing the contact us page");
        driver.findElement(By.xpath(
                "//button[@class='btn btn-primary btn-md btn-block waves-effect text-center m-b-20']"))
                .click();
        // Thread.sleep(3000);

        if (contactUsDialogBox.isEnabled()) {

            logStatus("End TestCase",
                    "Test Case 11 : Verify after clicking on the contact us button the contact dialoge box is closed",
                    status ? "PASS" : "FAIL");

        }

        takeScreenshot(driver, "EndTestCase", "TestCase11");
        return status;
    }

    public static Boolean TestCase12(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        takeScreenshot(driver, "StartTestCase", "TestCase12");
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        logStatus("Start TestCase",
                "Test Case 12: Verify Happy Flow of buying products and adds are present after successful checkout",
                "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 12", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 12: Checking for adds after placing order successfully failed : ",
                    status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 2 addr Line 3 addr line 3");
        checkoutPage.selectAddress("Addr line 2 addr Line 3 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");
        Thread.sleep(3000);

        List<WebElement> leftSideAdds = driver.findElements(By.xpath(
                "//div[@class='MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-4 css-92t6i8']/iframe"));
        // System.out.println(leftSideAdds.size());
        List<WebElement> rightSideAdd = driver.findElements(
                By.xpath("//div[@class='greeting-container MuiBox-root css-0']/iframe"));
        // System.out.println(rightSideAdd.size());
        if (leftSideAdds.size() == 2 && rightSideAdd.size() == 1) {
            logStatus("Step Success",
                    "The three adds are present on page one is on right side and two are on left side",
                    status ? "PASS" : "FAIL");
        }
        List<WebElement> frameSet = driver.findElements(By.xpath("//iframe[@class='iframe']"));
        //driver.switchTo().frame(0);
        // List<WebElement> viewCartButton =
        //         driver.findElements(By.xpath("//div[@class='action_buttons']/button[1]"));
        // List<WebElement> buyNowButton =
        //         driver.findElements(By.xpath("//div[@class='action_buttons']/button[2]"));
        logStatus("Step Success", "Switching from parent window to child window",
                status ? "PASS" : "FAIL");
        //System.out.println(frameSet.size());
        driver.switchTo().parentFrame();
        driver.switchTo().frame(0);
        driver.findElement(By.xpath("//div[@class='action_buttons']/button[1]")).click();
        String url = driver.getCurrentUrl();

        Thread.sleep(2000);
        if (url.equals("https://crio-qkart-frontend-qa.vercel.app/")) {
            // logStatus("Step Success", "Switching from parent window to frame 1", status ? "PASS"
            // : "FAIL");
            logStatus("Step Success ", "Checking for View Cart Button is clickable or not : Frame 1",
                    status ? "PASS" : "FAIL");
        } else {
            logStatus("Step Failure", "Checking for View Cart Button is clickable or not : Frame 1",
                    status ? "PASS" : "FAIL");
        }

        driver.navigate().back();
        driver.switchTo().parentFrame();
        driver.switchTo().frame(0);
        Thread.sleep(2000);
        driver.findElement(By.xpath("//div[@class='action_buttons']/button[2]")).click();
        String url1 = driver.getCurrentUrl();

        Thread.sleep(2000);
        if (url1.equals("https://crio-qkart-frontend-qa.vercel.app/checkout"))
        {
            logStatus("Step Success", "Checking for Buy Now Button is clickable or not : Frame 1",
                    status ? "PASS" : "FAIL");
        } else {
            logStatus("Step Failure", "Checking for Buy Now Button is clickable or not : Frame 1",
                    status ? "PASS" : "FAIL");
        }
        driver.navigate().back();
        // System.out.println(driver.switchTo().frame(0));
        driver.switchTo().parentFrame();
        driver.switchTo().frame(1);
        Thread.sleep(2000);
        driver.findElement(By.xpath("//div[@class='action_buttons']/button[1]")).click();
        String url2 = driver.getCurrentUrl();

        Thread.sleep(2000);
        if (url2.equals("https://crio-qkart-frontend-qa.vercel.app/")) 
        {
            logStatus("Step Success", "Checking for View Cart Button is clickable or not : Frame 2",
                    status ? "PASS" : "FAIL");
        } else {
            logStatus("Step Failure", "Checking for View Cart Button is clickable or not : Frame 2",
                    status ? "PASS" : "FAIL");
        }

        driver.navigate().back();
        driver.switchTo().parentFrame();
        driver.switchTo().frame(1);
        Thread.sleep(2000);
        driver.findElement(By.xpath("//div[@class='action_buttons']/button[2]")).click();
        String url3 = driver.getCurrentUrl();

        Thread.sleep(2000);
        if (url3.equals("https://crio-qkart-frontend-qa.vercel.app/checkout")) 
        {
            logStatus("Step Success", "Checking for Buy Now Button is clickable or not : Frame 2",
                    status ? "PASS" : "FAIL");
        } else {
            logStatus("Step Failure", "Checking for Buy Now Button is clickable or not : Frame 2",
                    status ? "PASS" : "FAIL");
        }
        driver.navigate().back();
        driver.switchTo().parentFrame();
        logStatus("End TestCase", "Test Case 12: Ensuring three adds are present on thanks page : ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase12");
        return status;
    }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        RemoteWebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
        //     // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            //Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            //Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            //Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // // // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 12
            totalTests += 1;
            status = TestCase12(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ",
                    Integer.toString(passedTests), Integer.toString(totalTests)));
        }

    }
}
